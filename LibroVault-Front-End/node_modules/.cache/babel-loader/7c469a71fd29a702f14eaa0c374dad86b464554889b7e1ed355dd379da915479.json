{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ericg\\\\Documents\\\\GitHub\\\\LibroVaultFinal\\\\LibroVault-Front-End\\\\src\\\\components\\\\CreateAccount.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\n\n//Initialize state variables for username and password and account visible\n//in a way like javas getter and setters but this one are designed to be manage the state of a component in a declaritve or reactive way. \n//useState-> allows functional components to manage state , where state is used to store and manage data that can change over time AND \n//affect how the componet renders \n//state variables (username,password etc)- used to keep track of data that might change as as the user interacts with the component such as fields in the \n//login page \n//(' ') This basically makes it to when the components is renderd it would appear empty \n//set\"x\" being any name , just changes/updates the state variables \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateAccount() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [rePassword, setRePassword] = useState('');\n  const navigate = useNavigate(); // Define the navigate function\n  const [userId, setUserId] = useState('');\n\n  // user makes new account\n  const handleCreateAccount = user => {\n    const userData = {\n      username,\n      password\n    };\n    if (password !== rePassword) {\n      alert('The password fields do not match. Please try again.');\n    } else if (username == '' || password == '') {\n      alert('The password or username fields are empty. Please try again');\n    } else if (/\\s/.test(username) || /\\s/.test(password)) {\n      alert('Empty spaces are not allowed in your username or password. Please try again.');\n    } else {\n      fetch('http://localhost:8080/api/users/createUser', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      }).then(response => response.json()).then(user => {\n        if (user.id) {\n          //update this for better response to useer\n          console.log('New user created with ID:', user.id);\n          setUserId(user.id);\n        } else {\n          console.error('User creation failed.');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n        // handle network errors or other issues\n      });\n\n      // Simulate automatic login after a delay (e.g., 3 seconds)\n      // setTimeout(() => {\n      //   // Replace with your actual login logic\n      //   // For now, automatically fill in the login fields and trigger login\n      //   setUsername('u');\n      //   setPassword('p');\n      //   handleLogin();\n      // }, 3000);\n    }\n  };\n\n  const handleDeleteAccount = userToDelete => {\n    if (userId) {\n      // make DELETE request to backend API to delete user\n      fetch(`http://localhost:8080/api/users/remove/${userId}`, {\n        method: 'DELETE'\n      }).then(response => {\n        if (response.ok) {\n          console.log('User deleted successfully');\n        } else {\n          console.error('Failed to delete user');\n          // handle errors and provide user feedback for failure\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n        // handle network errors or other issues\n      });\n    } else {\n      console.error('userID is missing or invalid');\n      // case where userID doesn't exist\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-account-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Enter Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Enter Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: rePassword,\n        onChange: e => setRePassword(e.target.value),\n        placeholder: \"Re-Type Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleCreateAccount,\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateAccount, \"nqcXU+6auOPWjle3smZR2Ytdyik=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateAccount;\nexport default CreateAccount;\nvar _c;\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","CreateAccount","_s","username","setUsername","password","setPassword","rePassword","setRePassword","navigate","userId","setUserId","handleCreateAccount","user","userData","alert","test","fetch","method","headers","body","JSON","stringify","then","response","json","id","console","log","error","catch","handleDeleteAccount","userToDelete","ok","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ericg/Documents/GitHub/LibroVaultFinal/LibroVault-Front-End/src/components/CreateAccount.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\r\n\r\n  //Initialize state variables for username and password and account visible\r\n  //in a way like javas getter and setters but this one are designed to be manage the state of a component in a declaritve or reactive way. \r\n  //useState-> allows functional components to manage state , where state is used to store and manage data that can change over time AND \r\n  //affect how the componet renders \r\n  //state variables (username,password etc)- used to keep track of data that might change as as the user interacts with the component such as fields in the \r\n  //login page \r\n  //(' ') This basically makes it to when the components is renderd it would appear empty \r\n  //set\"x\" being any name , just changes/updates the state variables \r\nfunction CreateAccount() {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [rePassword, setRePassword] = useState('');\r\n  const navigate = useNavigate(); // Define the navigate function\r\n  const [userId, setUserId] = useState('');\r\n\r\n\r\n// user makes new account\r\n  const handleCreateAccount = (user) => {\r\n\r\n    const userData = {\r\n      username,\r\n      password,\r\n    };\r\n\r\n\r\n    if (password !== rePassword) {\r\n      alert('The password fields do not match. Please try again.');\r\n    } \r\n    else if (username == '' || password == '') {\r\n      alert('The password or username fields are empty. Please try again')\r\n    }\r\n    else if (/\\s/.test(username) || /\\s/.test(password)) {\r\n      alert('Empty spaces are not allowed in your username or password. Please try again.')\r\n    }\r\n    else {\r\n      fetch('http://localhost:8080/api/users/createUser', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((user) => {\r\n          if (user.id) {\r\n            //update this for better response to useer\r\n            console.log('New user created with ID:', user.id);\r\n            setUserId(user.id);\r\n          } else {\r\n            console.error('User creation failed.');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n          // handle network errors or other issues\r\n      })\r\n\r\n      // Simulate automatic login after a delay (e.g., 3 seconds)\r\n      // setTimeout(() => {\r\n      //   // Replace with your actual login logic\r\n      //   // For now, automatically fill in the login fields and trigger login\r\n      //   setUsername('u');\r\n      //   setPassword('p');\r\n      //   handleLogin();\r\n      // }, 3000);\r\n    }\r\n  };\r\n\r\n  const handleDeleteAccount = (userToDelete) => {\r\n    if (userId) {\r\n      // make DELETE request to backend API to delete user\r\n      fetch(`http://localhost:8080/api/users/remove/${userId}` , {\r\n        method: 'DELETE',\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            console.log('User deleted successfully');\r\n          } else {\r\n            console.error('Failed to delete user');\r\n            // handle errors and provide user feedback for failure\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n            // handle network errors or other issues\r\n        });\r\n    } else {\r\n      console.error('userID is missing or invalid');\r\n      // case where userID doesn't exist\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"create-account-container\">\r\n      <h2>Create Account</h2>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Enter Username\"\r\n        />\r\n\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Enter Password\"\r\n        />\r\n\r\n        <input\r\n          type=\"password\"\r\n          value={rePassword}\r\n          onChange={(e) => setRePassword(e.target.value)}\r\n          placeholder=\"Re-Type Password\"\r\n        />\r\n\r\n        <button type=\"button\" onClick={handleCreateAccount}>\r\n          Create Account\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}