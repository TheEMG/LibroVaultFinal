{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ericg\\\\Documents\\\\GitHub\\\\LibroVaultFinal\\\\LibroVault-Front-End\\\\src\\\\components\\\\MainApplication.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useContext, createContext, useEffect } from 'react';\nimport '../App.css';\nimport LibraryContext from './LibraryContext';\nimport { useLocation } from 'react-router-dom';\nimport './MainApplication.css';\n\n//This is the App component, the main component\n//uses UseStat eo create 2 state variables: libraries (list of libraries) and selectedLibrary(the currently selected library)\n\n//libraryContext.Provider wraps the child components, so they can access the defined values of the values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainApplication() {\n  _s();\n  var _location$state2;\n  const [libraries, setLibraries] = useState([]);\n  const [selectedLibrary, setSelectedLibrary] = useState(null);\n  const location = useLocation();\n  const [userId, setUserId] = useState(null); // State for userId\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  //placeholder ads for the bottom of the page\n  const footerImages = ['/images/googlead2.png', '/images/googlead1.png', '/images/googlead3.png', '/images/googlead5.png', '/images/googlead4.png', '/images/googlead2.png', '/images/googlead1.png', '/images/googlead3.png', '/images/googlead5.png', '/images/googlead4.png'];\n  useEffect(() => {\n    var _location$state;\n    console.log('location:', location);\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.userId) {\n      console.log('userId:', location.state.userId); // Log userId\n      setUserId(location.state.userId);\n    }\n  }, [(_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.userId]);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      // Increment the index, and reset to 0 if it exceeds the array length\n      setCurrentImageIndex(prevIndex => prevIndex === footerImages.length - 1 ? 0 : prevIndex + 1);\n    }, 120000); // 120 seconds interval\n\n    // Cleanup the timer on component unmount\n    return () => clearInterval(timer);\n  }, [footerImages.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(LibraryContext.Provider, {\n      value: {\n        libraries,\n        setLibraries,\n        selectedLibrary,\n        setSelectedLibrary,\n        userId,\n        setUserId\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \"LibroVault\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(LibraryList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), selectedLibrary && /*#__PURE__*/_jsxDEV(Books, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"credits\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Welcome to LibroVault!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your go-to place for managing your book collection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Need help? Contact us at support@librovault.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"App Version: 1.0 (Last Updated: November 30, 2023)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: footerImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `Footer Image ${index + 1}`,\n          className: index === currentImageIndex ? 'visible' : 'hidden'\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n_s(MainApplication, \"ZKNMezyuCyQwQPy4GzvU6xSK6qo=\", false, function () {\n  return [useLocation];\n});\n_c = MainApplication;\nfunction LibraryList() {\n  _s2();\n  const {\n    libraries,\n    setLibraries,\n    selectedLibrary,\n    setSelectedLibrary,\n    userId\n  } = useContext(LibraryContext);\n  useEffect(() => {\n    const fetchLibraries = async () => {\n      if (!userId) {\n        console.log(\"User ID not found\");\n        return; // Or handle the absence of userId as appropriate\n      }\n\n      try {\n        const response = await fetch(`http://localhost:8080/api/libraries/user/${userId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const userLibraries = await response.json();\n        setLibraries(userLibraries);\n      } catch (error) {\n        console.error('Error fetching libraries:', error);\n      }\n    };\n    fetchLibraries();\n  }, [userId, setLibraries]); // Dependency array ensures this runs when userId or setLibraries changes\n\n  const addLibrary = async name => {\n    // Check if the name is provided\n    if (!name) {\n      alert('Please enter a library name.');\n      return;\n    }\n\n    // Check if the name is provided\n    if (name.trim === '') {\n      alert('Empty Strings are not allowed.');\n      return;\n    }\n    if (!name.trim()) {\n      alert('Name requires characters or numbers.');\n      return;\n    }\n\n    // Check if the userId is provided\n    if (!userId) {\n      alert('User ID is missing.');\n    }\n    const libraryData = {\n      name: name,\n      user: userId\n    };\n    try {\n      const response = await fetch('http://localhost:8080/api/libraries', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(libraryData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newLibrary = await response.json();\n      setLibraries([...libraries, newLibrary]);\n    } catch (error) {\n      console.error('Error adding library:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [libraries.map(library => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setSelectedLibrary(library),\n      children: library.name\n    }, library.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const name = prompt(\"Enter library name\");\n        if (name) addLibrary(name);\n      },\n      children: \"+ Add Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n}\n\n//This is the Books Component \n//This is the main area content that displays the information and details of each book in a library\n\n//This component defines the following functions: changeLibraryName, deleteLibrary, addBook, deleteBook, editButton, editBook, resetFields\n\n//This also has the algorithms to search books and sort them\n_s2(LibraryList, \"L264dB+ei4heiovrZ+Rgj5YQnY8=\");\n_c2 = LibraryList;\nfunction Books() {\n  _s3();\n  const {\n    libraries,\n    setLibraries,\n    selectedLibrary,\n    setSelectedLibrary\n  } = useContext(LibraryContext);\n  const [title, setTitle] = useState('');\n  const [author, setAuthor] = useState('');\n  const [translator, setTranslator] = useState('');\n  const [publicationDate, setPublicationDate] = useState('');\n  const [edition, setEdition] = useState('');\n  const [volumeNumber, setVolumeNumber] = useState('');\n  const [genre, setGenre] = useState('');\n  const [subgenre, setSubgenre] = useState('');\n  const [isbn, setIsbn] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [edit, setEdit] = useState(null);\n  const [sortMethod, setSortMethod] = useState('default');\n  const [bookId, setBookId] = useState('');\n  const changeLibraryName = newName => {\n    console.log('Attempting to change library name to:', newName);\n    const libraryId = selectedLibrary === null || selectedLibrary === void 0 ? void 0 : selectedLibrary.libraryId; // Optional chaining for safety\n    console.log('Attempting to change library name for ID:', libraryId);\n    if (!libraryId) {\n      console.error('libraryId is missing');\n      return;\n    }\n    if (!selectedLibrary.libraryId) {\n      console.error('libraryId is missing');\n      return;\n    }\n    if (!selectedLibrary) {\n      console.error('No Library selected');\n      return;\n    }\n    // Check if the name is provided\n    if (newName.trim === '') {\n      alert('Empty Strings are not allowed.');\n      return;\n    }\n    if (!newName.trim()) {\n      alert('Please enter a valid library name.');\n      return;\n    }\n    fetch(`http://localhost:8080/api/libraries/update/${libraryId}?newName=${encodeURIComponent(newName)}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      if (response.status === 204) {\n        // Handle no content response here\n        console.log('Library updated successfully, but no content returned.');\n        // You might want to update the state optimistically here\n        return null; // Return null to signal that no data is expected\n      }\n\n      return response.json();\n    }).then(updatedLibrary => {\n      const updatedLibraries = libraries.map(lib => lib.libraryId === updatedLibrary.libraryId ? updatedLibrary : lib);\n      setLibraries(updatedLibraries);\n      // If the updated library is the currently selected one, also update the selectedLibrary state\n      if (selectedLibrary && selectedLibrary.libraryId === updatedLibrary.libraryId) {\n        setSelectedLibrary(updatedLibrary);\n      }\n    }).catch(error => {\n      console.error('Error updating library name:', error);\n    });\n  };\n  useEffect(() => {\n    console.log('Libraries state updated:', libraries);\n  }, [libraries]);\n  const deleteLibrary = () => {\n    // [Added] Safety check for selectedLibrary and its libraryId\n    const libraryId = selectedLibrary === null || selectedLibrary === void 0 ? void 0 : selectedLibrary.libraryId;\n\n    // [Added] Check if there's a selected library to delete\n    if (!libraryId) {\n      console.error('No library selected or libraryId is missing');\n      return;\n    }\n    fetch(`http://localhost:8080/api/libraries/${libraryId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.status === 204) {\n        // Update the local state to remove the deleted library\n        const updatedLibraries = libraries.filter(lib => lib.libraryId !== libraryId);\n        setLibraries(updatedLibraries);\n\n        // [Added] Reset the selectedLibrary state if the deleted library was the selected one\n        if (selectedLibrary && selectedLibrary.libraryId === libraryId) {\n          setSelectedLibrary(null);\n        }\n      } else {\n        console.error('Failed to delete library');\n      }\n    }).catch(error => {\n      console.error('Error deleting library:', error);\n    });\n  };\n  const addBook = book => {\n    //Book Data to send to API \n    const bookData = {\n      title,\n      author,\n      translator,\n      publicationDate,\n      edition,\n      volumeNumber,\n      genre,\n      subgenre,\n      isbn\n    };\n    if (!book.title || !book.author || !book.genre) {\n      alert('Please complete the Title, Author, and Genre fields to add the book.');\n      return;\n    }\n    fetch('http://localhost:8080/api/books', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bookData)\n    })\n    // .then((response) => response.json())\n    .then(response => {\n      if (!response.ok) {\n        // Handle HTTP errors\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(addedBook => {\n      if (addedBook.id) {\n        console.log('New book added successfully with ID:', addedBook.id);\n        setBookId(addedBook.id);\n\n        // [Added] Variable to hold the updated selected library\n        let updatedSelectedLibrary = null;\n\n        // Update the local state to include the new book in the selected library\n        const updatedLibraries = libraries.map(lib => {\n          if (lib.libraryId === selectedLibrary.libraryId) {\n            // [Modified] Store the updated library in a variable\n            updatedSelectedLibrary = {\n              ...lib,\n              books: [...lib.books, addedBook]\n            };\n            return updatedSelectedLibrary;\n          }\n          return lib;\n        });\n\n        // [Modified] Update the selectedLibrary if it's the one being modified\n        if (updatedSelectedLibrary) {\n          setSelectedLibrary(updatedSelectedLibrary);\n        }\n\n        // Set the updated libraries array to the state\n        setLibraries(updatedLibraries);\n\n        // Now add the book's DBRef to the library\n        return fetch(`http://localhost:8080/api/libraries/${selectedLibrary.libraryId}/addBook/${addedBook.id}`, {\n          method: 'POST'\n        });\n      } else {\n        console.error('Failed to add book');\n        // Handle errors and provide user feedback for failed book addition.\n      }\n    }).then(libraryResponse => {\n      if (libraryResponse.ok) {\n        console.log('Book added to library successfully');\n        // Update UI or state as needed\n      } else {\n        console.error('Failed to add book to library');\n        // Handle errors and provide user feedback for failed library addition.\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n      // Handle network errors or other issues.\n    });\n  };\n\n  const deleteBook = bookToDelete => {\n    console.log(bookToDelete);\n    const bookId = bookToDelete.id;\n    if (!bookId) {\n      console.error('bookId is missing or invalid');\n      return; // Exit the function if bookId is not valid\n    }\n    // First, delete the book from the system\n    fetch(`http://localhost:8080/api/books/remove/${bookId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        console.log('Book deleted successfully from the system');\n\n        // Then, remove the book from the specific library\n        fetch(`http://localhost:8080/api/libraries/${selectedLibrary.libraryId}/removeBook/${bookId}`, {\n          method: 'DELETE'\n        }).then(libResponse => {\n          if (libResponse.ok) {\n            console.log('Book removed from the library successfully');\n            let updatedSelectedLibrary = null;\n\n            // Update the local state to reflect these changes\n            const updatedLibraries = libraries.map(lib => {\n              if (lib.libraryId === selectedLibrary.libraryId) {\n                updatedSelectedLibrary = {\n                  ...lib,\n                  books: lib.books.filter(book => book.id !== bookId)\n                };\n                return updatedSelectedLibrary;\n              }\n              return lib;\n            });\n\n            // Update the selectedLibrary if it's the one being modified\n            if (updatedSelectedLibrary) {\n              setSelectedLibrary(updatedSelectedLibrary);\n            }\n            setLibraries(updatedLibraries);\n            setEdit(null);\n          } else {\n            console.error('Failed to remove book from the library');\n          }\n        }).catch(error => {\n          console.error('Error removing book from library:', error);\n        });\n      } else {\n        console.error('Failed to delete book from the system');\n      }\n    }).catch(error => {\n      console.error('Error deleting book from system:', error);\n    });\n  };\n  const editButton = book => {\n    setTitle(book.title);\n    setAuthor(book.author);\n    setTranslator(book.translator);\n    setPublicationDate(book.publicationDate);\n    setEdition(book.edition);\n    setVolumeNumber(book.volumeNumber);\n    setGenre(book.genre);\n    setSubgenre(book.subgenre);\n    setIsbn(book.isbn);\n    setEdit(book);\n  };\n  const editBook = editedBook => {\n    if (!editedBook.title || !editedBook.author || !editedBook.genre) {\n      alert('Please complete the Title, Author, and Genre fields to edit the book.');\n      return;\n    }\n\n    // Ensure you have a valid bookId stored in the state variable\n    if (bookId) {\n      // Prepare the updated book data \n      const updatedBookData = {\n        title: editedBook.title,\n        author: editedBook.author,\n        translator: editedBook.translator,\n        publicationDate: editedBook.publicationDate,\n        edition: editedBook.edition,\n        volumeNumber: editedBook.volumeNumber,\n        genre: editedBook.genre,\n        subgenre: editedBook.subgenre,\n        isbn: editedBook.isbn\n      };\n\n      // Send a PUT request to update the book with the bookId\n      fetch(`http://localhost:8080/api/books/${bookId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedBookData)\n      }).then(response => {\n        if (response.ok) {\n          console.log('Book updated successfully');\n          // Update the book in the library\n          return fetch(`http://localhost:8080/api/libraries/books/${bookId}`, {\n            // [Added] API request to update the book in the library\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedBookData)\n          });\n        } else {\n          console.error('Failed to update book');\n          // Handle errors and provide user feedback for failed book update.\n        }\n      }).then(libraryResponse => {\n        if (libraryResponse.ok) {\n          console.log('Book updated in library successfully');\n          // Update UI or state as needed\n        } else {\n          console.error('Failed to update book in library');\n          // Handle errors and provide user feedback for failed library update.\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n        // Handle network errors or other issues.\n      });\n\n      const updatedLibraries = libraries.map(lib => {\n        if (lib === selectedLibrary) {\n          lib.books = lib.books.map(book => {\n            if (book === edit) {\n              return editedBook;\n            }\n            return book;\n          });\n        }\n        return lib;\n      });\n      setLibraries(updatedLibraries);\n      resetFields();\n    }\n    ;\n  }; //end of editBook\n\n  const resetFields = () => {\n    setTitle('');\n    setAuthor('');\n    setPublicationDate('');\n    setGenre('');\n    setTranslator('');\n    setEdition('');\n    setVolumeNumber('');\n    setSubgenre('');\n    setIsbn('');\n    setEdit(null);\n  };\n\n  // let searchedBooks = selectedLibrary.books.filter(book => book.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  let searchedBooks = selectedLibrary.books.filter(book => book && book.title.toLowerCase().includes(searchTerm.toLowerCase())); //now it will display null Book lists\n\n  if (sortMethod === 'alphabetical') {\n    searchedBooks.sort((a, b) => a.title.localeCompare(b.title));\n  } else if (sortMethod === 'byAuthor') {\n    searchedBooks.sort((a, b) => a.author.localeCompare(b.author));\n  } else if (sortMethod === 'byGenre') {\n    searchedBooks.sort((a, b) => a.genre.localeCompare(b.genre));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"books\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedLibrary.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const newName = prompt(\"Edit library name\");\n        if (newName) changeLibraryName(newName);\n      },\n      children: \"Edit Library Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteLibrary,\n      children: \"Delete Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a book...\",\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: sortMethod,\n      onChange: e => setSortMethod(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"default\",\n        children: \"Default Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"alphabetical\",\n        children: \"Sort Alphabetically By Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"byAuthor\",\n        children: \"Sort Alphabetically By Author\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"byGenre\",\n        children: \"Group By Genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }, this), searchedBooks.map((book, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: book.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.translator\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.publicationDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.edition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.volumeNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.genre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.subgenre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: book.isbn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteBook(book),\n        children: \"Delete book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => editButton(book),\n        children: \"Edit book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Book Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Author\",\n        value: author,\n        onChange: e => setAuthor(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Translator\",\n        value: translator,\n        onChange: e => setTranslator(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Publication Date\",\n        value: publicationDate,\n        onChange: e => setPublicationDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Edition\",\n        value: edition,\n        onChange: e => setEdition(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Volume Number\",\n        value: volumeNumber,\n        onChange: e => setVolumeNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Genre\",\n        value: genre,\n        onChange: e => setGenre(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Sub-genre\",\n        value: subgenre,\n        onChange: e => setSubgenre(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"ISBN\",\n        value: isbn,\n        onChange: e => setIsbn(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 17\n      }, this), edit ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => editBook({\n          title,\n          author,\n          translator,\n          publicationDate,\n          edition,\n          volumeNumber,\n          genre,\n          subgenre,\n          isbn\n        }),\n        children: \"Update Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addBook({\n          title,\n          author,\n          translator,\n          publicationDate,\n          edition,\n          volumeNumber,\n          genre,\n          subgenre,\n          isbn\n        }),\n        children: \"Add Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 583,\n    columnNumber: 9\n  }, this);\n}\n_s3(Books, \"dMV4judWA7ixSSORuMapvQNlD+U=\");\n_c3 = Books;\nexport default MainApplication;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MainApplication\");\n$RefreshReg$(_c2, \"LibraryList\");\n$RefreshReg$(_c3, \"Books\");","map":{"version":3,"names":["React","useState","useContext","createContext","useEffect","LibraryContext","useLocation","jsxDEV","_jsxDEV","MainApplication","_s","_location$state2","libraries","setLibraries","selectedLibrary","setSelectedLibrary","location","userId","setUserId","currentImageIndex","setCurrentImageIndex","footerImages","_location$state","console","log","state","timer","setInterval","prevIndex","length","clearInterval","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","className","LibraryList","Books","map","image","index","src","alt","_c","_s2","fetchLibraries","response","fetch","ok","Error","status","userLibraries","json","error","addLibrary","name","alert","trim","libraryData","user","method","headers","body","JSON","stringify","newLibrary","library","onClick","id","prompt","_c2","_s3","title","setTitle","author","setAuthor","translator","setTranslator","publicationDate","setPublicationDate","edition","setEdition","volumeNumber","setVolumeNumber","genre","setGenre","subgenre","setSubgenre","isbn","setIsbn","searchTerm","setSearchTerm","edit","setEdit","sortMethod","setSortMethod","bookId","setBookId","changeLibraryName","newName","libraryId","encodeURIComponent","then","updatedLibrary","updatedLibraries","lib","catch","deleteLibrary","filter","addBook","book","bookData","addedBook","updatedSelectedLibrary","books","libraryResponse","deleteBook","bookToDelete","libResponse","editButton","editBook","editedBook","updatedBookData","resetFields","searchedBooks","toLowerCase","includes","sort","a","b","localeCompare","type","placeholder","onChange","e","target","_c3","$RefreshReg$"],"sources":["C:/Users/ericg/Documents/GitHub/LibroVaultFinal/LibroVault-Front-End/src/components/MainApplication.js"],"sourcesContent":["import React, { useState, useContext, createContext, useEffect} from 'react';\r\nimport '../App.css';\r\nimport LibraryContext from './LibraryContext';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './MainApplication.css';\r\n\r\n//This is the App component, the main component\r\n//uses UseStat eo create 2 state variables: libraries (list of libraries) and selectedLibrary(the currently selected library)\r\n\r\n//libraryContext.Provider wraps the child components, so they can access the defined values of the values\r\n\r\nfunction MainApplication() {\r\n    const [libraries, setLibraries] = useState([]);\r\n    const [selectedLibrary, setSelectedLibrary] = useState(null);\r\n    const location = useLocation();\r\n    const [userId, setUserId] = useState(null); // State for userId\r\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n\r\n  //placeholder ads for the bottom of the page\r\n  const footerImages = [\r\n    '/images/googlead2.png',\r\n    '/images/googlead1.png',\r\n    '/images/googlead3.png',\r\n    '/images/googlead5.png',\r\n    '/images/googlead4.png',\r\n    '/images/googlead2.png',\r\n    '/images/googlead1.png',\r\n    '/images/googlead3.png',\r\n    '/images/googlead5.png',\r\n    '/images/googlead4.png',\r\n  ];\r\n    \r\n    useEffect(() => {\r\n        console.log('location:', location);\r\n        if (location.state?.userId) {\r\n          console.log('userId:', location.state.userId); // Log userId\r\n          setUserId(location.state.userId);\r\n        }\r\n      }, [location.state?.userId]);\r\n\r\n      useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      // Increment the index, and reset to 0 if it exceeds the array length\r\n      setCurrentImageIndex((prevIndex) =>\r\n        prevIndex === footerImages.length - 1 ? 0 : prevIndex + 1\r\n      );\r\n    }, 120000); // 120 seconds interval\r\n\r\n    // Cleanup the timer on component unmount\r\n    return () => clearInterval(timer);\r\n  }, [footerImages.length]);\r\n  \r\n    return (\r\n      <div> {/* This is the opening <div> tag */}\r\n        <LibraryContext.Provider value={{ libraries, setLibraries, selectedLibrary, setSelectedLibrary, userId, setUserId }}>\r\n          <header>LibroVault</header>\r\n          <div className=\"content\">\r\n            <LibraryList />\r\n            {selectedLibrary && <Books />}\r\n          </div>\r\n                    <div className=\"credits\">\r\n                    <p>Welcome to LibroVault!</p>\r\n                    <p>Your go-to place for managing your book collection.</p>\r\n                    <p>Need help? Contact us at support@librovault.com</p>\r\n                    <p>App Version: 1.0 (Last Updated: November 30, 2023)</p>\r\n                </div>\r\n\r\n      {/* Footer section */}\r\n      <div className=\"footer\">\r\n                {footerImages.map((image, index) => (\r\n                  <img\r\n                    key={index}\r\n                    src={image}\r\n                    alt={`Footer Image ${index + 1}`}\r\n                    className={index === currentImageIndex ? 'visible' : 'hidden'}\r\n                  />\r\n                ))}\r\n          </div>\r\n        </LibraryContext.Provider>\r\n      </div> \r\n    );\r\n  }\r\n  \r\n  \r\n\r\n\r\n\r\nfunction LibraryList() {\r\n    const { libraries, setLibraries, selectedLibrary, setSelectedLibrary, userId } = useContext(LibraryContext);\r\n  \r\n\r\n\r\n    useEffect(() => {\r\n        const fetchLibraries = async () => {\r\n            if (!userId) {\r\n                console.log(\"User ID not found\");\r\n                return; // Or handle the absence of userId as appropriate\r\n            }\r\n            try {\r\n                const response = await fetch(`http://localhost:8080/api/libraries/user/${userId}`);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const userLibraries = await response.json();\r\n                setLibraries(userLibraries);\r\n            } catch (error) {\r\n                console.error('Error fetching libraries:', error);\r\n            }\r\n        };\r\n\r\n        fetchLibraries();\r\n    }, [userId, setLibraries]); // Dependency array ensures this runs when userId or setLibraries changes\r\n\r\n\r\n    const addLibrary = async (name) => {\r\n        \r\n\r\n        // Check if the name is provided\r\n        if (!name) {\r\n            alert('Please enter a library name.');\r\n            return;\r\n        }\r\n\r\n        // Check if the name is provided\r\n        if (name.trim === '') {\r\n             alert('Empty Strings are not allowed.');\r\n            return;\r\n        }\r\n\r\n        if (!name.trim()) {\r\n            alert('Name requires characters or numbers.');\r\n            return;\r\n        }\r\n        \r\n\r\n        // Check if the userId is provided\r\n        if (!userId) {\r\n            alert('User ID is missing.');\r\n        }\r\n\r\n        const libraryData = {\r\n            name: name,\r\n            user: userId,\r\n        };\r\n    \r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/libraries', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(libraryData),\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n    \r\n            const newLibrary = await response.json();\r\n            setLibraries([...libraries, newLibrary]);\r\n        } catch (error) {\r\n            console.error('Error adding library:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sidebar\"> \r\n           {libraries.map((library) => (\r\n        <button key={library.id} onClick={() => setSelectedLibrary(library)}> \r\n         {library.name}\r\n       </button>\r\n        ))}\r\n            <button onClick={() => {\r\n                const name = prompt(\"Enter library name\");\r\n                if (name) addLibrary(name);\r\n            }}>\r\n                + Add Library\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n//This is the Books Component \r\n//This is the main area content that displays the information and details of each book in a library\r\n\r\n//This component defines the following functions: changeLibraryName, deleteLibrary, addBook, deleteBook, editButton, editBook, resetFields\r\n\r\n//This also has the algorithms to search books and sort them\r\nfunction Books() {\r\n    const { libraries, setLibraries, selectedLibrary, setSelectedLibrary } = useContext(LibraryContext);\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [translator, setTranslator] = useState('');\r\n    const [publicationDate, setPublicationDate] = useState('');\r\n    const [edition, setEdition] = useState('');\r\n    const [volumeNumber, setVolumeNumber] = useState('');\r\n    const [genre, setGenre] = useState('');\r\n    const [subgenre, setSubgenre] = useState('');\r\n    const [isbn, setIsbn] = useState('');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [edit, setEdit] = useState(null);\r\n    const [sortMethod, setSortMethod] = useState\r\n        ('default');\r\n    const [bookId, setBookId] = useState('');\r\n  \r\n\r\n\r\n  \r\n    const changeLibraryName = (newName) => {\r\n        console.log('Attempting to change library name to:', newName);\r\n        const libraryId = selectedLibrary?.libraryId; // Optional chaining for safety\r\n        console.log('Attempting to change library name for ID:', libraryId);\r\n    \r\n        if (!libraryId) {\r\n            console.error('libraryId is missing');\r\n            return;\r\n        }\r\n\r\n\r\n        if (!selectedLibrary.libraryId) {\r\n            console.error('libraryId is missing');\r\n            return;\r\n        }\r\n        if(!selectedLibrary){\r\n            console.error('No Library selected');\r\n            return;\r\n        }\r\n        // Check if the name is provided\r\n        if (newName.trim === '') {\r\n             alert('Empty Strings are not allowed.');\r\n            return;\r\n         }\r\n         if (!newName.trim()) {\r\n            alert('Please enter a valid library name.');\r\n            return;\r\n        }\r\n        \r\n        fetch(`http://localhost:8080/api/libraries/update/${libraryId}?newName=${encodeURIComponent(newName)}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            if (response.status === 204) {\r\n                // Handle no content response here\r\n                console.log('Library updated successfully, but no content returned.');\r\n                // You might want to update the state optimistically here\r\n                return null; // Return null to signal that no data is expected\r\n            }\r\n            return response.json();\r\n        })\r\n\r\n        .then(updatedLibrary => {\r\n            const updatedLibraries = libraries.map(lib => \r\n                lib.libraryId === updatedLibrary.libraryId ? updatedLibrary : lib\r\n            );\r\n            setLibraries(updatedLibraries);\r\n              // If the updated library is the currently selected one, also update the selectedLibrary state\r\n    if (selectedLibrary && selectedLibrary.libraryId === updatedLibrary.libraryId) {\r\n        setSelectedLibrary(updatedLibrary);\r\n    }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error updating library name:', error);\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        console.log('Libraries state updated:', libraries);\r\n    }, [libraries]);\r\n\r\n\r\n \r\n    const deleteLibrary = () => {\r\n    // [Added] Safety check for selectedLibrary and its libraryId\r\n    const libraryId = selectedLibrary?.libraryId; \r\n\r\n    // [Added] Check if there's a selected library to delete\r\n    if (!libraryId) {\r\n        console.error('No library selected or libraryId is missing');\r\n        return;\r\n    }\r\n    \r\n        fetch(`http://localhost:8080/api/libraries/${libraryId}`, {\r\n            method: 'DELETE',\r\n        })\r\n        .then(response => {\r\n            if (response.status === 204) {\r\n                // Update the local state to remove the deleted library\r\n                const updatedLibraries = libraries.filter(lib => lib.libraryId !== libraryId);\r\n                setLibraries(updatedLibraries);\r\n\r\n                // [Added] Reset the selectedLibrary state if the deleted library was the selected one\r\n            if (selectedLibrary && selectedLibrary.libraryId === libraryId) {\r\n                setSelectedLibrary(null);\r\n            }\r\n            } else {\r\n                console.error('Failed to delete library');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error deleting library:', error);\r\n        });\r\n    };\r\n    \r\n\r\n \r\n    const addBook = (book) => {\r\n        //Book Data to send to API \r\n        const bookData = {\r\n            title,\r\n            author,\r\n            translator,\r\n            publicationDate,\r\n            edition,\r\n            volumeNumber,\r\n            genre,\r\n            subgenre,\r\n            isbn,\r\n        };\r\n\r\n        if (!book.title || !book.author || !book.genre) {\r\n            alert('Please complete the Title, Author, and Genre fields to add the book.');\r\n            return;\r\n        }\r\n    \r\n        fetch('http://localhost:8080/api/books', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(bookData),\r\n        })\r\n        // .then((response) => response.json())\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                // Handle HTTP errors\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((addedBook) => {\r\n            if (addedBook.id) {\r\n                console.log('New book added successfully with ID:', addedBook.id);\r\n                setBookId(addedBook.id);\r\n        \r\n                // [Added] Variable to hold the updated selected library\r\n                let updatedSelectedLibrary = null;\r\n        \r\n                // Update the local state to include the new book in the selected library\r\n                const updatedLibraries = libraries.map(lib => {\r\n                    if (lib.libraryId === selectedLibrary.libraryId) {\r\n                        // [Modified] Store the updated library in a variable\r\n                        updatedSelectedLibrary = {\r\n                            ...lib,\r\n                            books: [...lib.books, addedBook],\r\n                        };\r\n                        return updatedSelectedLibrary;\r\n                    }\r\n                    return lib;\r\n                });\r\n        \r\n                // [Modified] Update the selectedLibrary if it's the one being modified\r\n                if (updatedSelectedLibrary) {\r\n                    setSelectedLibrary(updatedSelectedLibrary);\r\n                }\r\n        \r\n                // Set the updated libraries array to the state\r\n                setLibraries(updatedLibraries);\r\n        \r\n    \r\n                // Now add the book's DBRef to the library\r\n                return fetch(`http://localhost:8080/api/libraries/${selectedLibrary.libraryId}/addBook/${addedBook.id}`, {\r\n                    method: 'POST',\r\n                });\r\n            } else {\r\n                console.error('Failed to add book');\r\n                // Handle errors and provide user feedback for failed book addition.\r\n            }\r\n        })\r\n        .then((libraryResponse) => {\r\n            if (libraryResponse.ok) {\r\n                console.log('Book added to library successfully');\r\n                // Update UI or state as needed\r\n            } else {\r\n                console.error('Failed to add book to library');\r\n                // Handle errors and provide user feedback for failed library addition.\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error);\r\n            // Handle network errors or other issues.\r\n        });\r\n    };\r\n    \r\n            \r\n            \r\n            \r\n        \r\n\r\n    const deleteBook = (bookToDelete) => {\r\n        console.log(bookToDelete);\r\n        const bookId = bookToDelete.id;\r\n\r\n        if (!bookId) {\r\n            console.error('bookId is missing or invalid');\r\n            return; // Exit the function if bookId is not valid\r\n        }\r\n        // First, delete the book from the system\r\n        fetch(`http://localhost:8080/api/books/remove/${bookId}`, {\r\n            method: 'DELETE',\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                console.log('Book deleted successfully from the system');\r\n    \r\n                // Then, remove the book from the specific library\r\n                fetch(`http://localhost:8080/api/libraries/${selectedLibrary.libraryId}/removeBook/${bookId}`, {\r\n                    method: 'DELETE',\r\n                })\r\n                .then(libResponse => {\r\n                    if (libResponse.ok) {\r\n                        console.log('Book removed from the library successfully');\r\n\r\n                        let updatedSelectedLibrary = null;\r\n    \r\n                        // Update the local state to reflect these changes\r\n                        const updatedLibraries = libraries.map(lib => {\r\n                            if (lib.libraryId === selectedLibrary.libraryId) {\r\n                                updatedSelectedLibrary = {\r\n                                    ...lib,\r\n                                    books: lib.books.filter(book => book.id !== bookId),\r\n                                };\r\n                                return updatedSelectedLibrary;\r\n                            }\r\n                            return lib;\r\n                        });\r\n                        \r\n                        // Update the selectedLibrary if it's the one being modified\r\n                        if (updatedSelectedLibrary) {\r\n                            setSelectedLibrary(updatedSelectedLibrary);\r\n                        }\r\n    \r\n                        setLibraries(updatedLibraries);\r\n                        setEdit(null);\r\n    \r\n                    } else {\r\n                        console.error('Failed to remove book from the library');\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error removing book from library:', error);\r\n                });\r\n            } else {\r\n                console.error('Failed to delete book from the system');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error deleting book from system:', error);\r\n        });\r\n    };\r\n    \r\n\r\n    const editButton = (book) => {\r\n        setTitle(book.title);\r\n        setAuthor(book.author);\r\n        setTranslator(book.translator);\r\n        setPublicationDate(book.publicationDate);\r\n        setEdition(book.edition);\r\n        setVolumeNumber(book.volumeNumber);\r\n        setGenre(book.genre);\r\n        setSubgenre(book.subgenre);\r\n        setIsbn(book.isbn);\r\n        setEdit(book);\r\n    };\r\n\r\n    const editBook = (editedBook) => {\r\n        if (!editedBook.title || !editedBook.author || !editedBook.genre) {\r\n            alert('Please complete the Title, Author, and Genre fields to edit the book.');\r\n            return;\r\n        }\r\n\r\n            // Ensure you have a valid bookId stored in the state variable\r\n    if (bookId) {\r\n        // Prepare the updated book data \r\n        const updatedBookData = {\r\n          title: editedBook.title,\r\n          author: editedBook.author,\r\n          translator: editedBook.translator,\r\n          publicationDate: editedBook.publicationDate,\r\n          edition: editedBook.edition,\r\n          volumeNumber: editedBook.volumeNumber,\r\n          genre: editedBook.genre,\r\n          subgenre: editedBook.subgenre,\r\n          isbn: editedBook.isbn,\r\n        };\r\n    \r\n        // Send a PUT request to update the book with the bookId\r\n        fetch(`http://localhost:8080/api/books/${bookId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(updatedBookData),\r\n        })\r\n          .then((response) => {\r\n            if (response.ok) {\r\n              console.log('Book updated successfully');\r\n               // Update the book in the library\r\n               return fetch(`http://localhost:8080/api/libraries/books/${bookId}`, { // [Added] API request to update the book in the library\r\n               method: 'PUT',\r\n               headers: {\r\n                 'Content-Type': 'application/json',\r\n               },\r\n               body: JSON.stringify(updatedBookData),\r\n             });\r\n            } else {\r\n              console.error('Failed to update book');\r\n              // Handle errors and provide user feedback for failed book update.\r\n            }\r\n          })\r\n          .then((libraryResponse) => {\r\n            if (libraryResponse.ok) {\r\n                console.log('Book updated in library successfully');\r\n                // Update UI or state as needed\r\n            } else {\r\n                console.error('Failed to update book in library');\r\n                // Handle errors and provide user feedback for failed library update.\r\n            }\r\n        })\r\n          .catch((error) => {\r\n            console.error('Error:', error);\r\n            // Handle network errors or other issues.\r\n          });\r\n\r\n        const updatedLibraries = libraries.map(lib => {\r\n            if (lib === selectedLibrary) {\r\n                lib.books = lib.books.map(book => {\r\n                    if (book === edit) {\r\n                        return editedBook;\r\n                    }\r\n                    return book;\r\n                });\r\n            }\r\n            return lib;\r\n        });\r\n        setLibraries(updatedLibraries);\r\n        resetFields();\r\n    };\r\n    }; //end of editBook\r\n\r\n    const resetFields = () => {\r\n        setTitle('');\r\n        setAuthor('');\r\n        setPublicationDate('');\r\n        setGenre('');\r\n        setTranslator('');\r\n        setEdition('');\r\n        setVolumeNumber('');\r\n        setSubgenre('');\r\n        setIsbn('');\r\n        setEdit(null);\r\n    };\r\n\r\n    // let searchedBooks = selectedLibrary.books.filter(book => book.title.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    let searchedBooks = selectedLibrary.books\r\n    .filter(book => book && book.title.toLowerCase().includes(searchTerm.toLowerCase()));//now it will display null Book lists\r\n\r\n    if (sortMethod === 'alphabetical') {\r\n        searchedBooks.sort((a, b) => a.title.localeCompare(b.title));\r\n    } else if (sortMethod === 'byAuthor') {\r\n        searchedBooks.sort((a, b) => a.author.localeCompare(b.author));\r\n    } else if (sortMethod === 'byGenre') {\r\n        searchedBooks.sort((a, b) => a.genre.localeCompare(b.genre));\r\n    }\r\n\r\n    return (\r\n        <div className=\"books\">\r\n            <h2>{selectedLibrary.name}</h2>\r\n            <button onClick={() => {\r\n                const newName = prompt(\"Edit library name\");\r\n                if (newName) changeLibraryName(newName);\r\n            }}>\r\n                Edit Library Name\r\n            </button>\r\n            <button onClick={deleteLibrary}>Delete Library</button>\r\n            <input type=\"text\" placeholder=\"Search for a book...\" onChange={e => setSearchTerm(e.target.value)} />\r\n\r\n            <select value={sortMethod} onChange={(e) => setSortMethod(e.target.value)}>\r\n                <option value=\"default\">Default Order</option>\r\n                <option value=\"alphabetical\">Sort Alphabetically By Title</option>\r\n                <option value=\"byAuthor\">Sort Alphabetically By Author</option>\r\n                <option value=\"byGenre\">Group By Genre</option>\r\n            </select>\r\n\r\n            {searchedBooks.map((book, index) => (\r\n                <div key={index}>\r\n                    <h4>{book.title}</h4>\r\n                    <p>{book.author}</p>\r\n                    <p>{book.translator}</p>\r\n                    <p>{book.publicationDate}</p>\r\n                    <p>{book.edition}</p>\r\n                    <p>{book.volumeNumber}</p>\r\n                    <p>{book.genre}</p>\r\n                    <p>{book.subgenre}</p>\r\n                    <p>{book.isbn}</p>\r\n                    <button onClick={() => deleteBook(book)}>Delete book</button>\r\n                    <button onClick={() => editButton(book)}>Edit book</button>\r\n                </div>\r\n            ))}\r\n\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Book Title\" value={title} onChange={e => setTitle(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Author\" value={author} onChange={e => setAuthor(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Translator\" value={translator} onChange={e => setTranslator(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Publication Date\" value={publicationDate} onChange={e => setPublicationDate(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Edition\" value={edition} onChange={e => setEdition(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Volume Number\" value={volumeNumber} onChange={e => setVolumeNumber(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Genre\" value={genre} onChange={e => setGenre(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Sub-genre\" value={subgenre} onChange={e => setSubgenre(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"ISBN\" value={isbn} onChange={e => setIsbn(e.target.value)} />\r\n\r\n                {edit ? (\r\n                    <button onClick={() => editBook({ title, author, translator, publicationDate, edition, volumeNumber, genre, subgenre, isbn })}>\r\n                        Update Book\r\n                    </button>\r\n                ) : (\r\n                    <button onClick={() => addBook({ title, author, translator, publicationDate, edition, volumeNumber, genre, subgenre, isbn })}>\r\n                        Add Book\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainApplication;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}